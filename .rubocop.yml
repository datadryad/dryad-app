AllCops:
  NewCops: enable
  Exclude:
    - 'bin/**/*'
    - 'config/**/*'
    - 'db/**/*'
    - 'script/**/*'
    - 'vendor/**/*'
    - 'documentation/**/*'
    - 'app/models/stash_engine/lock.rb'
    - 'ui-library/**/*'
    - 'node_modules/**/*'
    - 'tmp/**/*'
  # Suppress complaints about post-2.0 syntax
  TargetRubyVersion: 2.7

# Allow one line around block body (Layout/EmptyLines will still disallow two or more)
Layout/EmptyLinesAroundBlockBody:
  Enabled: false

# Allow one line around class body (Layout/EmptyLines will still disallow two or more)
Layout/EmptyLinesAroundClassBody:
  Enabled: false

# Allow one line around module body (Layout/EmptyLines will still disallow two or more)
Layout/EmptyLinesAroundModuleBody:
  Enabled: false

# Make indents consistent regardless of the lengths of variables and method names and whatnot
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

# Produces monsters
Layout/MultilineOperationIndentation:
  Enabled: false

# because you want an exception that applies to your case, not something random
Lint/ShadowedException:
  Enabled: false

# Reasonable line-length check; it's too easy for the cure to be worse than the disease
Layout/LineLength:
  Max: 150

# AbcSize is very low at 15 and often catches perfectly readable methods because of two small if statements
Metrics/AbcSize:
  Max: 45

# The default Lengths can flag methods which essentially do nothing, simply because they invoke another method with several parameters
Metrics/ClassLength:
  Max: 200
  Exclude:
    - '**/spec/**/*.rb'
    
Metrics/MethodLength:
  Max: 30
  Exclude:
    - '**/spec/**/*.rb'

Metrics/BlockLength:
  Max: 200
  Exclude:
    - '**/spec/**/*.rb'

Metrics/ModuleLength:
  Exclude:
    - '**/spec/**/*.rb'

# reasonable complexity
Metrics/PerceivedComplexity:
  Max: 20

Metrics/CyclomaticComplexity:
  Max: 20

# We meant to do that
Naming/MemoizedInstanceVariableName:
  Enabled: False

# It works in context, trust us
Naming/MethodParameterName:
  Enabled: False

# Confusing and weird
Naming/VariableNumber:
  Enabled: False
  
# Do what's readable in the context you're in
Style/AccessModifierDeclarations:
  Enabled: false

# ðŸ‘Ž to cultural imperialism
Style/AsciiComments:
  Enabled: false

# Seriously?
Style/CommentedKeyword:
  Enabled: False

# Disable problematic module documentation check (see https://github.com/bbatsov/rubocop/issues/947)
Style/Documentation:
  Enabled: false

# Doesn't necessarily make anything more readable
Style/ExplicitBlockArgument:
  Enabled: false

# Adding more line noise to format strings will not improve them
Style/FormatStringToken:
  Enabled: false

# Putting '# frozen_string_literal: true' everywhere does not make the world a better place
Style/FrozenStringLiteralComment:
  Enabled: false

# Requiring the lambda() method just makes wordy calls wordier
Style/Lambda:
  EnforcedStyle: literal

# `foo.positive?` is cute, but it's not actually more readable than `foo > 0`
Style/NumericPredicate:
  Enabled: false

# The semantics of `foo&.bar` are a lot less interchangeable with `foo && foo.bar` than RuboCop thinks
Style/SafeNavigation:
  Enabled: false

# Unclear why it's a good idea to give parameters semantically meaningless names
Style/SingleLineBlockParams:
  Enabled: false

# Allow some special handling for engines
Bundler/OrderedGems:
  TreatCommentsAsGroupSeparators: true

# ------------------------
# new stuff in new rubocop
# ------------------------
Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: false

Layout/SpaceAroundMethodCallOperator:
  Enabled: false

Lint/DeprecatedOpenSSLConstant:
  Enabled: true

Lint/MixedRegexpCaptureTypes:
  Enabled: true

Lint/RaiseException:
  Enabled: false

Lint/StructNewOverride:
  Enabled: true

Style/ExponentialNotation:
  Enabled: false

Style/HashEachMethods:
  Enabled: true

Style/HashTransformKeys:
  Enabled: false

Style/HashTransformValues:
  Enabled: false

Style/RedundantRegexpCharacterClass:
  Enabled: true

Style/RedundantRegexpEscape:
  Enabled: true

Style/SlicingWithRange:
  Enabled: true

