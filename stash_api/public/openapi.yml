openapi: 3.0.0
servers:
  - url: /api/v2/

info:
  title: dryad-api
  description: |
    The API for the [Dryad](https://datadryad.org) data publication and
    preservation platform.

    In addition to this documentation, please see the [API Submission Examples](https://github.com/CDL-Dryad/dryad/blob/master/documentation/api_submission.md) which give concrete examples of submission through the Dryad API.

    Our [Github Documentation Directory](https://github.com/CDL-Dryad/dryad/tree/master/documentation) may also be expanded further in the future as more documentation is created (though not all of it may be relevant to API users).

  version: "2.0.0"

paths:
  # --- root uri ----
  /:
    get:
      summary: The root of the API
      description: Mainly to have HATEOAS links to root level objects like datasets.
      responses:
        '200':
          description: The root of the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/root_links'
              examples:
                $ref: 'api/v2/docs/examples/root.json'

  # --- test for bearer authentication ---
  /test:
    get:
      security:
        - bearerAuth: []
      summary: Test OAuth2 and bearer authentication.
      description: "Test authentication by sending authenticated headers like **'Accept: application/json'**, **'Content-Type: application/json'**, **'Authorization: Bearer {your-token}'**."
      responses:
        '200':
          description: a welcome message if successful
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Welcome Brenda Ngrulu"
                  user_id:
                    type: integer
                    example: 10

  # --- datasets uris ---
  /datasets:
    get:
      summary: Get list of all datasets
      description: Items returned may depend on user or permission and are paged.  Search API to come later.
      responses:
        '200':
          description: A list of datasets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasets'
          examples:
            application/json:
              $ref: api/v2/docs/examples/datasets.json
    post:
      summary: Create a new dataset with a DOI automatically generated
      description: You must be logged in. Use the JSON structure and schema as shown below.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dc_metadata'
            # https://github.com/swagger-api/swagger-ui/issues/3771 -- examples don't work
            example:
              $ref: api/v2/docs/examples/dataset_post_request.json
      responses:
        '201':
          description: response showing dataset info that has been saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasets'
          examples:
            application/json:
              $ref: api/v2/docs/examples/dataset.json

  '/datasets/{doi}':
    get:
      summary: Get a dataset by its doi
      description: Be sure to encode the DOI (see below for format)
      parameters:
        - $ref: '#/components/parameters/doi'
      responses:
        '200':
          description: A dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset'
          examples:
            application/json:
              $ref: api/v2/docs/examples/dataset.json
    put:
      summary: Update (overwrite) dataset metadata for DOI or insert new with specified DOI
      description: This will overwrite writeable metadata for an in-progress dataset or will create a new dataset with the specified DOI identifier if one doesn't exist.  This is an insert or update action (upsert).
      parameters:
        - $ref: '#/components/parameters/doi'
      security:
        - bearerAuth: []
      requestBody:
        description: "json needed for updating a new dataset: example doesn't show because OpenAPI is broken it seems"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dc_metadata'
            # https://github.com/swagger-api/swagger-ui/issues/3771 -- examples don't work
            example:
              $ref: api/v2/docs/examples/dataset_post_request.json
      responses:
        '200':
          description: response showing dataset info that has been saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasets'
          examples:
            application/json:
              $ref: api/v2/docs/examples/dataset.json
    patch:
      parameters:
        - $ref: '#/components/parameters/doi'
      security:
        - bearerAuth: []
      summary: Submit the in-progress dataset
      description: "Submit by sending a JSON patch request whose JSON body looks like **[ { 'op': 'replace', 'path': '/versionStatus', 'value': 'submitted' } ]**. (This tells it to attempt changing the versionStatus to Submitted.) Set http header **'Content-Type: application/json-patch+json'** when making the request instead of a standard json content-type."
      requestBody:
        description: json for patching the versionStatus to a 'submitted' state
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/dataset_submission'
      responses:
        '202':
          description: Submission taking place, watch the dataset versionStatus for changes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset'
          examples:
            application/json:
              $ref: api/v2/docs/examples/dataset.json

  '/datasets/{doi}/download':
    get:
      summary: Get download package for dataset.
      description: This would download the zip file for the latest submitted and visible version of the dataset to the user (if authorized) or the public.
      parameters:
        - $ref: '#/components/parameters/doi'
      responses:
        '200':
          description: The binary content for a compressed archive
          content:
            application/zip:
              schema:
                type: string
                format: binary

  '/datasets/{doi}/versions':
    get:
      summary: Show all versions of a dataset
      description: The versions endpoint allows seeing all (visible) versions. This is in contrast to GETting the datasets endpoiunt for a DOI, since it only embeds metadata for the latest visible version.
      parameters:
        - $ref: '#/components/parameters/doi'
      responses:
        '200':
          description: A list of a dataset's versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versions'
          examples:
            application/json:
              $ref: api/v2/docs/examples/versions.json

  # --- versions uris ---
  '/versions/{id}':
    get:
      summary: Show a specific dataset version
      description: "If you know the dataset version's internal id, you can request to see it directly. The versions endpoint lists the versions and their ids if you need to find this id."
      parameters:
        - $ref: '#/components/parameters/version_id'
      responses:
        '200':
          description: The version of the dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/version'
          examples:
            application/json:
              $ref: api/v2/docs/examples/version.json

  '/versions/{id}/files':
    get:
      summary: Show a list of files and file metadata
      description: Returns the list of files and file metadata for a known version of a dataset with the version id you specify.
      parameters:
        - $ref: '#/components/parameters/version_id'
      responses:
        '200':
          description: A list of the files in the version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files'
          examples:
            application/json:
              $ref: api/v2/docs/examples/files.json

  '/versions/{id}/download':
    get:
      summary: Get a download package for a dataset version
      description: This only works for versions submitted to the repository (and assuming permission to view).  Allows you to download a zip file for the contents for that version of the dataset.
      parameters:
        - $ref: '#/components/parameters/version_id'
      responses:
        '200':
          description: The binary content for a compressed archive
          content:
            application/zip:
              schema:
                type: string
                format: binary

  '/files/{id}':
    get:
      summary: Get metadata information about a file
      description: Returns file metadata information (if visible to you) and if you know the internal id.  The version file list embeds this and also gives the internal ids.
      parameters:
        - $ref: '#/components/parameters/file_id'
      responses:
        '200':
          description: A single file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
          examples:
            application/json:
              $ref: api/v2/docs/examples/file.json
    delete:
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/file_id'
      summary: Remove a file from an in-progress dataset version
      description: "This action only works on an in-progress dataset (this means that the latest version of a dataset associated with this file has to be in-progress). It will destroy the metadata and file if it's a staged file that hasn't been submitted to the repository yet.  If the file was submitted previously in an earlier version of the same dataset it will stage removal from the in-progress dataset version.  In order to finalize staged file changes into the storage repository, the in-progress dataset must be submitted again after all changes are ready."
      responses:
        '201':
          description: The file and metadata was removed from staging.  Or the file and metadata was staged for removal from this version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
          examples:
            application/json:
              $ref: api/v2/docs/examples/file.json

  '/files/{id}/download':
    get:
      summary: Download a specific file
      description: Only files that have been stored in the storage repository may be downloaded (and ability to download may depend on the user).  Versions of a dataset still in-progress only have staged files that may not be downloaded until they have been submitted to the storage repository.
      parameters:
        - $ref: '#/components/parameters/file_id'
      responses:
        '200':
          description: The binary content of the file downloads as the http body.  The "Content-Type" and "Content-Disposition" headers will be set to reflect the file content-type and filename when downloading (following http standards).
          content:
            "*/*":
              schema:
                type: string
                format: binary

  # --- upload a file in body with filename in url ---
  '/datasets/{doi}/files/{filename}':
    put:
      summary: Upload and stage a file for an in-progress dataset.
      description: Allows uploading a file to be staged for submission to the storage repository. The files will be stored in the storage repository after the dataset is submitted.  The body of the request will be the file you are uploading.  Set the **'Content-Type'** http header to the appropriate mimetype for your file when uploading.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/doi'
        - $ref: '#/components/parameters/filename'
      requestBody:
        description: a binary file with content-type set
        required: true
        content:
          "*/*":
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: file was created on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
          examples:
            application/json:
              $ref: api/v2/docs/examples/file.json

  '/datasets/{doi}/urls':
    put:
      summary: Stage a file submission by URL
      description: "The URL you specify will be deposited into the storage repository from a publicly accessible URL on the internet when the in-progress dataset is submitted.  The dataset must be an in-progress dataset. The URL will be validated and metadata about it obtained to populate metadata about the file when it is added.  Send the url to be retrieved as part of a JSON document like **{'url': 'http://example.org/testing/my/file.csv' }**.  Priviliged users may have additional options to specify URL metadata rather than having live-validation and metadata gathering performed from the Internet."
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/doi'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/url_json'
      responses:
        '201':
          description: Metadata for the URL was saved and the response json indicates information populated for a file object based on the URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
          examples:
            application/json:
              $ref: api/v2/docs/examples/file.json

# ------------------
# --- components ---
# ------------------
components:
  schemas:

    # --- root ---
    root:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/root_links'
      required:
        - _links

    root_links:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/hal_link'
        "stash:datasets":
          $ref: '#/components/schemas/hal_link'
        curies:
          type: array
          items:
            $ref: '#/components/schemas/hal_curie'
      required:
        - self

    # --- Dataset(s) ---

    # plural
    datasets:
      allOf:
        - $ref: '#/components/schemas/hal_paged_response'
        - $ref: '#/components/schemas/embedded_datasets'

    embedded_datasets:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            'stash:datasets':
              type: array
              items:
                $ref: '#/components/schemas/dataset'

    #singular
    dataset:
      allOf:
        - $ref: '#/components/schemas/dataset_links'
        - properties:
            id:
              type: integer
            identifier:
              type: string
            storage_size:
              type: number
        - $ref: '#/components/schemas/version'

    dataset_links:
      properties:
        _links:
          allOf:
            - $ref: '#/components/schemas/hal_self_link'
            - $ref: '#/components/schemas/hal_dataset_links'

    hal_dataset_links:
      properties:
        'stash:versions':
          $ref: '#/components/schemas/hal_link'
        'stash:version':
          $ref: '#/components/schemas/hal_link'
        'stash:download':
          $ref: '#/components/schemas/hal_link'
        curies:
          type: array
          items:
            $ref: '#/components/schemas/hal_curie'

    dataset_submission:
      properties:
        op:
          type: string
          enum: ['replace']
          example: replace
        path:
          type: string
          enum: ['/versionStatus']
          example: "/versionStatus"
        value:
          type: string
          enum: ['submitted']
          example: submitted

    # --- Version(s) ---
    # plural
    versions:
      allOf:
        - $ref: '#/components/schemas/hal_paged_response'
        - $ref: '#/components/schemas/embedded_versions'

    embedded_versions:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            'stash:versions':
              type: array
              items:
                $ref: '#/components/schemas/version'

    # singular
    version:
      allOf:
        - $ref: '#/components/schemas/version_links'
        - $ref: '#/components/schemas/dc_metadata'
        - properties:
            versionNumber:
              type: integer
            versionStatus:
              type: string
            userId:
              type: integer
            curationStatus:
              type: string

    version_links:
      properties:
        _links:
          allOf:
            - $ref: '#/components/schemas/hal_self_link'
            - $ref: '#/components/schemas/hal_version_links'

    hal_version_links:
      properties:
        'stash:dataset':
          $ref: '#/components/schemas/hal_link'
        'stash:files':
          $ref: '#/components/schemas/hal_link'
        'stash:download':
          $ref: '#/components/schemas/hal_link'
        curies:
          type: array
          items:
            $ref: '#/components/schemas/hal_curie'

    simple_version:
      allOf:
        - $ref: '#/components/schemas/dc_metadata'

    # --- file(s) ---

    # plural
    files:
      allOf:
        - $ref: '#/components/schemas/hal_paged_response'
        - $ref: '#/components/schemas/embedded_files'

    embedded_files:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            'stash:files':
              type: array
              items:
                $ref: '#/components/schemas/file'

    # singular
    file:
      allOf:
        - $ref: '#/components/schemas/file_links'
        - properties:
            path:
              type: string
            size:
              type: integer
            mimeType:
              type: string
            status:
              type: string
            digest:
              type: string
            digestType:
              type: string

    file_links:
      properties:
        _links:
          allOf:
            - $ref: '#/components/schemas/hal_self_link'
            - $ref: '#/components/schemas/hal_file_links'


    # singular
    url:
      properties:
        url:
          type: string

    hal_file_links:
      properties:
        'stash:dataset':
          $ref: '#/components/schemas/hal_link'
        'stash:version':
          $ref: '#/components/schemas/hal_link'
        'stash:files':
          $ref: '#/components/schemas/hal_link'
        'stash:download':
          $ref: '#/components/schemas/hal_link'
        curies:
          type: array
          items:
            $ref: '#/components/schemas/hal_curie'

    dc_metadata:
      type: object
      properties:
        title:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/author'
        abstract:
          type: string
        funders:
          type: array
          items:
            $ref: '#/components/schemas/funder'
        keywords:
          type: array
          items:
            type: string
        methods:
          type: string
        usageNotes:
          type: string
        locations:
          type: array
          items:
            $ref: '#/components/schemas/geolocation'
        relatedWorks:
          type: array
          items:
            $ref: '#/components/schemas/relatedWork'
      required:
        - title
        - authors
        - abstract

    author:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        affiliation:
          type: string
        orcid:
          type: string
    simple_author:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        affiliation:
          type: string
    funder:
      properties:
        organization:
          type: string
        awardNumber:
          type: string
    relatedWork:
      properties:
        relationship:
          type: string
        identifierType:
          type: string
        identifier:
          type: string
    geolocation:
      properties:
        place:
          description: a place name.
          type: string
        box:
          $ref: '#/components/schemas/geolocationBox'
          description: a bounding box.
        point:
          $ref: '#/components/schemas/geolocationPoint'
          description: a coordinate point.
    geolocationBox:
      properties:
        swLongitude:
          description: the longitude of the southwest corner of the box.
          type: number
        swLatitude:
          description: the latitude of the southwest corner of the box.
          type: number
        neLongitude:
          description: the longitude of the northeast corner of the box.
          type: number
        neLatitude:
          description: the latitude of the northeast corner of the box.
          type: number
    geolocationPoint:
      type: object
      properties:
        latitude:
          description: the latitude of the point.
          type: number
        longitude:
          description: the longitude of the point.
          type: number
    embargo:
      type: object
      properties:
        embargoEndDate:
          format: date
          description: the end date of the embargo.
          type: string
    tenant:
      type: object
      properties:
        id:
          format: string
        abbreviation:
          format: string
        shortName:
          format: string
        longName:
          format: string
        domainName:
          format: string

    # --- specific link section for different resources ---


    # --- generic linking methods that give links for boilerplate junk used everywhere ---
    # TODO: hal_links should be purged because it's too generic and doesn't express real link structure
    hal_links:
      properties:
        self:
          $ref: '#/components/schemas/hal_link'
        curies:
          type: array
          items:
            $ref: '#/components/schemas/hal_curie'
      required:
        - self

    hal_self_link:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/hal_link'

    hal_page_links:
      properties:
        first:
          $ref: '#/components/schemas/hal_link'
        last:
          $ref: '#/components/schemas/hal_link'
        prev:
          $ref: '#/components/schemas/hal_link'
        next:
          $ref: '#/components/schemas/hal_link'

    paging_counts:
      properties:
        count:
          type: integer
        total:
          type: integer

    hal_link:
      type: object
      properties:
        href:
          type: string
          format: uri
      required:
        - href

    hal_curie:
      type: object
      properties:
        name:
          type: string
        href:
          type: string
          format: uri
        templated:
          type: boolean
      required:
        - name
        - href
        - templated

    hal_paged_response:
      allOf:
        - properties:
            _links:
              allOf:
                - $ref: '#/components/schemas/hal_self_link'
                - $ref: '#/components/schemas/hal_page_links'
        - $ref: '#/components/schemas/paging_counts'

    url_json:
      type: object
      properties:
        url:
          type: string
      required:
        - url

  # parameters for going into URLs (and json?)
  parameters:
    doi:
      in: path
      name: doi
      schema:
        type: string
      required: true
      description: "DOI like doi:10.1000/18238577 that should be escaped (example: doi%3A10.1000%2F18238577 )"

    version_id:
      in: path
      name: id
      schema:
        type: integer
      required: true
      description: "The version id is a unique integer and can be obtained from the list of versions for a dataset"

    file_id:
      in: path
      name: id
      schema:
        type: integer
      required: true
      description: "The file id is a unique integer and can be obtained from the list of files for a version of a dataset"

    filename:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: "The filename is the filename for the file. It should be escaped in the URL (for example 'cat tundra.jpg' would be 'cat%20tundra.jpg'.  Your programming language will have a library to encode for you."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
