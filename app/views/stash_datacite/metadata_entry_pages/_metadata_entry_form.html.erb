<% if params[:display_validation] %>
  <%= render partial: "stash_datacite/resources/missing_mandatory_data",
             locals: { error_items: StashDatacite::Resource::DatasetValidations.new(resource: @resource).errors } %>
<% end %>
<div class="c-autosave-header">
  <h1 class="o-heading__level1">Describe your <%= @resource&.resource_type&.resource_type || 'dataset' %></h1>
  <div class="c-autosave__text saving_text" style="display: none;">Saving&hellip;</div>
  <div class="c-autosave__text saved_text" style="display: none;">All Progress Saved.</div>
</div>

<h2 class="o-heading__page-span">Preliminary information</h2>

  <%= react_component('components/MetadataEntry/PrelimInfo',
                      { importInfo: @resource&.identifier&.import_info,
                        resourceId: @resource.id,
                        identifierId: @resource.identifier_id,
                        publication_name: @publication_name,
                        publication_issn: @publication_issn,
                        msid: @msid,
                        related_identifier: @doi.related_identifier || ''
                      }) %>

<h2 class="o-heading__page-span"><%= @resource&.resource_type&.try(:resource_type_general_ui) || 'Dataset' %>: Basic information</h2>

  <%= react_component('components/MetadataEntry/Title', { resource: @resource.slice(:id, :title), path: titles_update_path, type: @resource&.resource_type&.try(:resource_type_general_ui) || 'Dataset' } ) %><br>

  <fieldset class="c-fieldset">
    <legend class="c-fieldset__legend" id="authors-head">Author(s)</legend>
    <div class="js-authors_form">
      <%= react_component('components/MetadataEntry/Authors', { resource: @resource,
          dryadAuthors: @resource.authors.includes(:affiliations).map{|auth| auth.as_json.merge(
              affiliation: auth.affiliation.as_json,
              orcid_invite_path: auth&.orcid_invite_path)},
              curator: current_user&.limited_curator?,
              correspondingAuthorId: @resource.owner_author&.id,
              createPath: authors_create_path,
              reorderPath: authors_reorder_path,
              deletePath: authors_delete_path('id_xox')
      } ) %>
    </div>
  </fieldset>

  <div class="c-input__inline">
    <div class="c-input">
      <%= react_component('components/MetadataEntry/ResearchDomain',
                         resourceId: @resource.id,
                         subject: @resource&.subjects&.permissive_fos&.first&.subject,
                         subjectList: StashDatacite::Subject.fos.pluck(:subject).uniq.sort,
                         updatePath: fos_subjects_update_path) %>
    </div>
    <div class="c-input">
      <%= render partial: "stash_datacite/contributors/facility_form", locals: { resource: @resource } %>
    </div>
  </div>

  <fieldset class="c-fieldset" id="funder_fieldset">
    <legend class="c-fieldset__legend" id="funders-head">Funding</legend>
    <div className="js-contributors_form">
      <%= react_component('components/MetadataEntry/Funders',
                          resourceId: @resource.id,
                          contributors: @metadata_entry.contributors,
                          groupings: @metadata_entry.contributor_groupings,
                          createPath: contributors_create_path,
                          updatePath: contributors_update_path,
                          reorderPath: contributors_reorder_path,
                          deletePath: contributors_delete_path('id_xox'))
      %>
    </div>
  </fieldset>

    <%= react_component('components/MetadataEntry/Description',
                        dcsDescription: @metadata_entry.abstract,
                        path: descriptions_update_path,
                        mceKey: APP_CONFIG[:mce_key],
                        mceLabel: {label: 'Abstract', required: true, describe: ''},
                        isCurator: current_user&.limited_curator?) %>
  <% unless @resource&.resource_type&.resource_type == 'collection' %>

    <h2 class="o-heading__page-span">Data description</h2>
    
    <!--  CEDAR Metadata Editor -->
    <%= react_component('components/MetadataEntry/Cedar',  { resource: @resource.slice(:id, :title, :cedar_json), appConfig: APP_CONFIG[:cedar] } ) %>
    
    <%# if @metadata_entry.subjects.empty? %>
      <%# render partial: "stash_datacite/subjects/form", locals: { subject: @metadata_entry.new_subject, resource_id: @resource.id } %>
    <%# else %>
      <%# render partial: "stash_datacite/subjects/form", locals: { resource_id: @resource.id } %>
    <%# end %>
  <% end %>

    <%= react_component('components/MetadataEntry/Keywords',
                        resourceId: @resource.id,
                        subjects: @metadata_entry.subjects.map{ |i| {id: i.id, subject: i.subject }  },
                        createPath: subjects_create_path,
                        deletePath: subjects_delete_path('subj_xoxo', resource_id: @resource.id)) %>

  <% unless @resource&.resource_type&.resource_type == 'collection' %>

    <%= react_component('components/MetadataEntry/Description',
                    dcsDescription: @metadata_entry.methods,
                    path: descriptions_update_path,
                    mceKey: APP_CONFIG[:mce_key],
                    mceLabel: {label: 'Methods:', required: false, describe: ' How was this dataset collected? How has it been processed?'},
                    isCurator: current_user&.limited_curator?) %>

    <% if @metadata_entry.other.description.present? %>
    <%= react_component('components/MetadataEntry/Description',
                    dcsDescription: @metadata_entry.other,
                    path: descriptions_update_path,
                    mceKey: APP_CONFIG[:mce_key],
                    mceLabel: {label: 'Usage notes:', required: false,
                               describe: ' What programs and/or software are required to open the data files included with your submission? ' +
			       'If proprietary, include open-source alternatives.'},
                    isCurator: current_user&.limited_curator?) %>
    <% end %>

  <% end %>

    <h2 class="o-heading__page-span"><%= @resource&.resource_type&.resource_type == 'collection' ? 'Collected and r' : 'R' %>elated works</h2>

    <% worktypes = StashDatacite::RelatedIdentifier::WORK_TYPE_CHOICES.invert.to_a %>
    <% worktypes[0], worktypes[1] = worktypes[1], worktypes[0] if @resource&.resource_type&.resource_type = 'collection' %>
    <%= react_component('components/MetadataEntry/RelatedWorks',
                        resourceType: @resource&.resource_type&.resource_type,
                        resourceId: @resource.id,
                        relatedIdentifiers: @metadata_entry.related_identifiers
                            .map{|i|
                              i.as_json.merge( valid_url_format: i.valid_url_format?)
                            }, # result of this method into data
                        workTypes: worktypes ) %>
