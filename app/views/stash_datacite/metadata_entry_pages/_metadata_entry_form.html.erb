<% if params[:display_validation] %>
  <%= render partial: "stash_datacite/resources/missing_mandatory_data",
             locals: { error_items: StashDatacite::Resource::DatasetValidations.new(resource: @resource).errors } %>
<% end %>
<div class="c-autosave-header">
  <h1 class="o-heading__level1">Describe Your Dataset</h1>
  <div class="c-autosave__text saving_text" style="display: none;">Saving&hellip;</div>
  <div class="c-autosave__text saved_text" style="display: none;">All Progress Saved.</div>
</div>

<h2 class="o-heading__page-span">Preliminary Information</h2>

  <%= react_component('components/MetadataEntry/PrelimInfo',
                      { importInfo: @resource&.identifier&.import_info,
                        resourceId: @resource.id,
                        identifierId: @resource.identifier_id,
                        publication_name: @publication_name,
                        publication_issn: @publication_issn,
                        msid: @msid,
                        related_identifier: @doi.related_identifier || ''
                      }) %>

<h2 class="o-heading__page-span">Dataset: Basic Information</h2>

  <%= react_component('components/MetadataEntry/Title', { resource: @resource.slice(:id, :title), path: titles_update_path } ) %><br>

  <fieldset class="c-fieldset">
    <legend class="c-fieldset__legend">Author(s)</legend>
    <div class="js-authors_form">
      <%= react_component('components/MetadataEntry/Authors', { resource: @resource,
          dryadAuthors: @resource.authors.includes(:affiliations).map{|auth| auth.as_json.merge(
              affiliation: auth.affiliation.as_json,
              orcid_invite_path:
                  (auth.author_orcid.blank? && auth.author_email.present? && auth.resource.identifier.pub_state == 'published' ?
                       auth.orcid_invite_path : nil ))},
              curator: current_user&.curator?, icon: '/images/fa-barfs.svg', # because the asset pipeline not working right on stage
              correspondingAuthorId: @resource.owner_author&.id
      } ) %>
    </div>
  </fieldset>

  <div class="c-input__inline">
    <div class="c-input">
      <%= react_component('components/MetadataEntry/ResearchDomain',
                         resourceId: @resource.id,
                         subject: @resource&.subjects&.permissive_fos&.first&.subject,
                         subjectList: StashDatacite::Subject.fos.pluck(:subject).uniq.sort,
                         updatePath: fos_subjects_update_path) %>
    </div>
    <div class="c-input">
      <%= render partial: "stash_datacite/contributors/facility_form", locals: { resource: @resource } %>
    </div>
  </div>

  <fieldset class="c-fieldset" id="funder_fieldset">
    <legend class="c-fieldset__legend">Funding</legend>
    <div className="js-contributors_form">
      <%= react_component('components/MetadataEntry/Funders',
                          resourceId: @resource.id,
                          contributors: @metadata_entry.contributors,
                          createPath: contributors_create_path,
                          updatePath: contributors_update_path,
                          deletePath: contributors_delete_path('id_xox'))
      %>
    </div>
  </fieldset>

    <%= react_component('components/MetadataEntry/Description',
                        dcsDescription: @metadata_entry.abstract,
                        path: descriptions_update_path,
                        mceKey: APP_CONFIG[:mce_key],
                        mceLabel: {label: 'Abstract', required: true, describe: ''},
                        isCurator: current_user&.curator?) %>

    <h2 class="o-heading__page-span">Data Description</h2>

    <%# if @metadata_entry.subjects.empty? %>
      <%# render partial: "stash_datacite/subjects/form", locals: { subject: @metadata_entry.new_subject, resource_id: @resource.id } %>
    <%# else %>
      <%# render partial: "stash_datacite/subjects/form", locals: { resource_id: @resource.id } %>
    <%# end %>

    <%= react_component('components/MetadataEntry/Keywords',
                        resourceId: @resource.id,
                        subjects: @metadata_entry.subjects.map{ |i| {id: i.id, subject: i.subject }  },
                        createPath: subjects_create_path,
                        deletePath: subjects_delete_path('subj_xoxo', resource_id: @resource.id)) %>

    <%= react_component('components/MetadataEntry/Description',
                    dcsDescription: @metadata_entry.methods,
                    path: descriptions_update_path,
                    mceKey: APP_CONFIG[:mce_key],
                    mceLabel: {label: 'Methods:', required: false, describe: ' How was this dataset collected? How has it been processed?'},
                    isCurator: current_user&.curator?) %>

    <%= react_component('components/MetadataEntry/Description',
                    dcsDescription: @metadata_entry.other,
                    path: descriptions_update_path,
                    mceKey: APP_CONFIG[:mce_key],
                    mceLabel: {label: 'Usage Notes:', required: false,
                               describe: ' What else would someone need to know to use this dataset?' +
                                   ' Are there any missing values? Please upload any files necessary for re-use ' +
                                   '(i.e. ReadMe files) and note them.'},
                    isCurator: current_user&.curator?) %>

    <h2 class="o-heading__page-span">Related Works</h2>

    <%= react_component('components/MetadataEntry/RelatedWorks',
                        resourceId: @resource.id,
                        relatedIdentifiers: @metadata_entry.related_identifiers
                            .map{|i|
                              i.as_json.merge( valid_url_format: i.valid_url_format?)
                            }, # result of this method into data
                        workTypes: StashDatacite::RelatedIdentifier::WORK_TYPE_CHOICES.invert.to_a ) %>
