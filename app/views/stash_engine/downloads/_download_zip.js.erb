const messageChannel = new MessageChannel();
navigator.serviceWorker.register('/service-worker.js', { scope });
let keepAlive = null;
const dialog = document.getElementById('genericModalDialog');
const dialogContent = document.getElementById('genericModalContent');
const form = document.getElementById('zip_download');
const inputs = document.getElementById('file_downloads');
navigator.serviceWorker.ready.then(worker => {
  worker.active.postMessage({type: 'PORT_INITIALIZATION', url: form.action}, [messageChannel.port2]); 
});
const insertFiles = async (files) => {
  const selectForm = document.getElementById('download-select-form').elements
  for (const f of files) {
    if (selectForm[f.filename]?.checked) {
      for (const k of Object.keys(f)) {
        const i = document.createElement('input');
        i.setAttribute('type', 'hidden');
        i.setAttribute('name', k);
        i.setAttribute('value', f[k]);
        inputs.appendChild(i);
      }
    }
  }
  return true;
}
const loadFiles = async (files) => {
  await insertFiles(files);
  form.submit();
  dlbutton.lastElementChild.innerHTML = 'Download in progress';
  dialogContent.innerHTML = '<h1>Download in progress</h1><p>Closing this window may interrupt the dataset download. Please keep this window open until your download is complete.</p><p><span id="dl_filename"></span> <span id="dl_filesize"></span><br/><progress id="dl_progressbar" value="0"></progress></p>';
  dialog.showModal();
  keepAlive = setInterval(() => {
    navigator.serviceWorker.ready.then(worker => {
      worker.active.postMessage({type: 'KEEP_ALIVE'})
    })
  }, 10000);
}
const failMessage = () => {
  if (dialog.open) dialog.close();
  dialogContent.innerHTML = '<h1>Download error</h1><p>Please reload and try again, or download the individual files.</p>';
  dialog.showModal();
  dlbutton.lastElementChild.innerHTML = 'Download full dataset';
  dlbutton.classList.add('o-download__files');
  dlbutton.classList.remove('o-download__wait');
  dlbutton.removeAttribute('disabled');
}
const checkResponse = async (response) => {
  if (response.ok) {
    const files = await response.json();
    loadFiles(files);
  } else if (response.status === 405) {
    dialogContent.innerHTML = '<h1>Confirm you are human</h1><div id="captcha-div"></div>'
    AwsWafCaptcha.renderCaptcha(document.getElementById('captcha-div'), {
      apiKey: '<%= APP_CONFIG.waf_key %>',
      skipTitle: true,
      onLoad: () => { if (!dialog.open) dialog.showModal(); },
      onSuccess: async (token) =>  {
        dialog.close();
        dlbutton.focus();
        const response = await AwsWafIntegration.fetch(zip_url);
        checkResponse(response);
      },
      onError: failMessage,
    });
  } else {
    failMessage();
  }
}
dlbutton.addEventListener('click', async e => {
  dlbutton.disabled = true;
  dlbutton.classList.remove('o-download__files');
  dlbutton.classList.add('o-download__wait');
  dlbutton.lastElementChild.innerHTML = 'Preparing download';
  const response = await AwsWafIntegration.fetch(zip_url);
  checkResponse(response);
})
messageChannel.port1.start();
messageChannel.port1.addEventListener("message", ({data}) => {
  if (data.msg === 'Headers') {
    const {filename, size} = data
    document.getElementById('dl_filename').innerText = filename
    document.getElementById('dl_filesize').innerText = `(${formatSizeUnits(Number(size))})`
  } else if (data.msg == 'Streaming') {
    document.getElementById('dl_progressbar').setAttribute('value', data.complete)
  } else if (data.msg === 'Stream complete') {
    inputs.innerHTML = '';
    if (keepAlive) clearInterval(keepAlive);
    dlbutton.classList.add('o-download__files');
    dlbutton.classList.remove('o-download__wait');
    dlbutton.lastElementChild.innerHTML = 'Download full dataset';
    dlbutton.removeAttribute('disabled');
    if (dialog.open) {
      dialog.close();
      dlbutton.focus();
    }
  }
});
