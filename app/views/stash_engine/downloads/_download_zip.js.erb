const messageChannel = new MessageChannel();
navigator.serviceWorker.register('/stash/service-worker.js');
let keepAlive = null;
const dialog = document.getElementById('genericModalDialog');
const dialogContent = document.getElementById('genericModalContent');
const form = document.getElementById('zip_download');
const inputs = document.getElementById('file_downloads');
navigator.serviceWorker.ready.then(worker => {
  worker.active.postMessage({type: 'PORT_INITIALIZATION', url: form.action}, [messageChannel.port2]); 
});
const refetch = async () => {
  let count = 2;
  const csrf = document.querySelector("meta[name='csrf-token']")?.getAttribute('content');
  while (count > 0) {
    const response = await fetch(`/stash/downloads/zip_assembly_info/${resource_id}`, {headers: {"X-CSRF-Token": csrf}});
    if (response.ok) {
      return response
    }
    console.log('Network error retrieving list of presigned urls');
    await new Promise(r => setTimeout(r, 1000));
    count = count - 1;
  }
  return fetch(`/stash/downloads/zip_assembly_info/${resource_id}`, {headers: {"X-CSRF-Token": csrf}});
}
const insertFiles = async (files) => {
  for (const f of files) {
    for (const k of Object.keys(f)) {
      const i = document.createElement('input');
      i.setAttribute('type', 'hidden');
      i.setAttribute('name', k);
      i.setAttribute('value', f[k]);
      inputs.appendChild(i);
    }
  }
  return true;
}
dlbutton.addEventListener('click', async e => {
  dlbutton.disabled = true;
  dlbutton.classList.remove('o-download__files');
  dlbutton.classList.add('o-download__wait');
  dlbutton.childNodes[1].nodeValue = 'Preparing download';
  const response = await refetch();
  if (response.ok) {
    const files = await response.json();
    await insertFiles(files);
    form.submit();
    dlbutton.childNodes[1].nodeValue = 'Download full dataset';
    dialogContent.innerHTML = '<h1>Download in progress</h1><p>Closing this window may interrupt the dataset download. Please keep this window open until your download is complete.</p>';
    dialog.showModal();
    keepAlive = setInterval(() => {
      navigator.serviceWorker.ready.then(worker => {
        worker.active.postMessage({type: 'keep-alive'})
      })
    }, 10000);
  } else {
    dialogContent.innerHTML = '<h1>Download error</h1><p>Please reload and try again, or download the individual files.</p>';
    dialog.showModal();
    dlbutton.childNodes[1].nodeValue = 'Download full dataset';
    dlbutton.classList.add('o-download__files');
    dlbutton.classList.remove('o-download__wait');
    dlbutton.removeAttribute('disabled');
  }
})
messageChannel.port1.start();
messageChannel.port1.addEventListener("message", ({data}) => {
  if (data.msg === 'Stream complete') {
    inputs.innerHTML = '';
    if (keepAlive) clearInterval(keepAlive);
    dlbutton.classList.add('o-download__files');
    dlbutton.classList.remove('o-download__wait');
    dlbutton.removeAttribute('disabled');
    if (dialog.open) dialog.close();
  }
});