const messageChannel = new MessageChannel();
navigator.serviceWorker.register('/stash/service-worker.js');
let keepAlive;
const dialog = document.getElementById('genericModalDialog');
const dialogContent = document.getElementById('genericModalContent');
const form = document.getElementById('zip_download');
const inputs = document.getElementById('file_downloads');
navigator.serviceWorker.ready.then(worker => {
  worker.active.postMessage({type: 'PORT_INITIALIZATION', url: form.action}, [messageChannel.port2]); 
});
dlbutton.addEventListener('click', async e => {
  dlbutton.disabled = true;
  dlbutton.classList.remove('o-download__files');
  dlbutton.classList.add('o-download__wait');
  dlbutton.childNodes[1].nodeValue = 'Preparing download';
  const response = await fetch(`/stash/downloads/zip_assembly_info/${resource_id}`, {credentials: 'include'});
  if (response.ok) {
    const files = await response.json();
    files.forEach(f => {
      Object.keys(f).forEach(k => {
        const i = document.createElement('input');
        i.setAttribute('name', k);
        i.setAttribute('value', f[k]);
        inputs.appendChild(i);
      })
    })
  }
  form.submit();
  inputs.innerHTML = '';
  dlbutton.childNodes[1].nodeValue = 'Download full dataset';
  dialogContent.innerHTML = '<h1>Download in progress</h1><p>Closing this window may interrupt the dataset download. Please keep this window open until your download is complete.</p>';
  dialog.showModal();
  keepAlive = setInterval(() => fetch('/stash/downloadZip/keep-alive', { method: 'POST' }), 10000);
})
messageChannel.port1.start();
messageChannel.port1.addEventListener("message", (event) => {
  clearInterval(keepAlive);
  dlbutton.classList.add('o-download__files');
  dlbutton.classList.remove('o-download__wait');
  dlbutton.removeAttribute('disabled');
  if (dialog.open) dialog.close();
});