# SortableTableHelper
# Tools for supporting sortable tables in HTML views
module StashEngine
  module SortableTableHelper

    # A sortable table is a table on an HTML page, where clicking one
    # of the column headings causes the table to re-sort by the data
    # in that column. Sorting is controlled by:
    #   params[:sort] -- name of the field to sort by in the current table.
    #   params[:direction] -- either 'asc' for ascending or 'desc' for  descending

    # To make a sortable table:
    # 1. If you are adding new search filters or other parameters that
    #    must be preserved between sorts, add the field names to the
    #    `sortable_table_params` below.
    # 2. In the controller for the table, add `helper SortableTableHelper`.
    #    Use `helpers.sortable_table_params` params wherever a list of params
    #    is needed. This will allow you to pass a large list of params
    #    between pages safely. When an ordering is required, you can
    #    either use the `params[:sort]` and `params[:direction]`
    #    directly, or use the reasonable default generated by
    #    `helpers.sortable_table_order`.
    # 3. In the view, create table headers with `sortable_column_head` and `sort_display`.

    # If your table is generated by joining database tables, it is best to reference the
    # column names using both the database table name and field name to avoid ambiguity. For example, in a view:
    # <%= sortable_column_head(sort_field: 'stash_engine_proposed_changes.publication_date', title: 'Published') %>

    # Display an indicator on the column that is currently sorted
    def sort_display(col)
      return unless col == params[:sort]

      if params[:direction] == 'asc'
        'c-lined-table__sort-asc'
      else
        'c-lined-table__sort-desc'
      end
    end

    # Creates the clickable column heading for a sortable column
    def sortable_column_head(sort_field:, title:)
      link_to(
        title,
        sort_link_url(sort_field),
        class: params[:sort] == sort_field ? "current #{params[:direction]}" : nil,
        title: "Click to sort"
      )
    end

    # Passthrough for query parameters that are allowed on pages with sortable tables
    def sortable_table_params
      params.permit(:q, :sort, :direction, :page, :page_size, :show_all,
                    :tenant, :editor_id, :curation_status, :publication_name, :sponsor_org,
                    :all_advanced)
    end

    # Generate a string for ordering ActiveRecord selections. If no sort order
    # has been set, defaults to sorting records by the `created_at` date.
    # ONLY allow the whitelist of fields and the two orders to prevent SQL injection
    def sortable_table_order(whitelist: [])
      params[:sort] = 'created_at' if params[:sort].blank?
      params[:direction] = 'asc' if params[:direction].blank?
      params[:direction] = 'asc' unless %w[asc desc].include?(params[:direction]) # limit to only these two sort orders
      params[:sort] = whitelist.first unless whitelist.include?(params[:sort]) # limit to whitelisted field names

      return '' if params[:sort].blank? || params[:direction].blank?

      "#{params[:sort]} #{params[:direction]}"
    end

    private

    # Returns the sort url for a given sort_field.
    def sort_link_url(sort_field)
      query_params = sortable_table_params
      query_params[:sort] = sort_field
      query_params[:direction] = if params[:sort] == sort_field
                                   switch_direction(params[:direction])
                                 else
                                   params[:direction] || 'asc'
                                 end

      local_params = sortable_table_params.to_unsafe_h.with_indifferent_access.merge!(request.query_parameters)
      base_url = "#{request.path}?#{local_params.merge!(sort: query_params[:sort], direction: query_params[:direction]).to_query}"
      sort_url = URI(base_url)
      sort_url.to_s
    end

    def switch_direction(dir)
      dir.downcase == 'asc' ? 'desc' : 'asc'
    end

  end
end
