Rails.application.config.middleware.use OmniAuth::Builder do
  provider :shibboleth,
           callback_path: '/stash/auth/shibboleth/callback',
           request_type: :header,
           host: StashEngine.app.shib_sp_host,
           uid_field: 'eppn',
           path_prefix: '/stash/auth',
           info_fields: {
             email: 'mail',
             identity_provider: 'shib_identity_provider'
           }

  provider :orcid, StashEngine.app.orcid.key, StashEngine.app.orcid.secret,
           member: StashEngine.app.orcid.member,
           sandbox: StashEngine.app.orcid.sandbox,
           callback_path: '/stash/auth/orcid/callback',
           path_prefix: '/stash/auth',
           authorize_params: {
             scope: '/read-limited'
           },
           client_options: {
             site: StashEngine.app.orcid_site,
             authorize_url: StashEngine.app.orcid.authorize_url,
             token_url: StashEngine.app.orcid.token_url
           }

  # this is to deal with http URLs being generated by omniauth when we want https but we have a reverse proxy that disguises we're using https
  OmniAuth.config.full_host = ->(env) do
    # "omniauth.strategy"=>#<OmniAuth::Strategies::ORCID> might be helpful if we need to know if strategy is ORCID
    u = URI.parse("http://#{env['HTTP_X_FORWARDED_HOST'] || env['HTTP_HOST']}")
    u.scheme = 'https' if env['omniauth.strategy'].to_s.include?('ORCID') && !u.host[/(localhost)|(.+dash\.datadryad\.org)/]
    "#{u.scheme}://#{u.host}#{(u.port == 80 ? '' : ":#{u.port}")}" # only add port if it's not 80
  end

  ## Omniauth on_failure behavior to work for all ENV including localhost
  OmniAuth.config.on_failure = ->(env) do
    Rack::Response.new(['302 Moved'], 302, 'Location' => env['omniauth.origin'] || '/').finish
  end
end
