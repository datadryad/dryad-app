<h1>Test your uploads</h1>

<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<script src=""></script>

<script>

  // see these examples in addition to the one in the main readme
  // https://github.com/TTLabs/EvaporateJS/blob/c1f8905d173f07dab1f277b4bd753a2ce2303967/example/evaporate_example_awsv4_signature.html

  // I found this after doing most of this the hard way
  // https://product.voxmedia.com/2018/9/10/17839952/the-missing-guide-to-s3-uploads-with-evaporatejs-ruby-on-rails

  function evaporateIt(fileObj) {
    // These are defined on the window and imported by browserify and evaporate_init.js
    // const Evaporate = require('EvaporateJS');
    // const Crypto = require('crypto');

    // see example like https://github.com/TTLabs/EvaporateJS/blob/c1f8905d173f07dab1f277b4bd753a2ce2303967/example/evaporate_example_awsv4_signature.html
    const config = {
      signerUrl: "<%= stash_engine.presign_upload_path %>",
      aws_key: "<%= APP_CONFIG[:s3][:key] %>",
      bucket: "<%= APP_CONFIG[:s3][:bucket] %>",
      awsRegion: "<%= APP_CONFIG[:s3][:region] %>",
      awsSignatureVersion: '4',
      computeContentMd5: true,
      cryptoMd5Method: data => { return AWS.util.crypto.md5(data, 'base64'); },
      cryptoHexEncodedHash256: data => { return AWS.util.crypto.sha256(data, 'hex'); }
    };

    const md5Id = Crypto.createHash('MD5').update(fileObj.name).digest('hex');

    /*
     ---- I tried both versions of these hash methods and I could only get the AWS ones to work, though it seems
     a shame because importing the full AWS libraries seems wastefully huge just for their crypto methods ----

    cryptoMd5Method: function (data) { return AWS.util.crypto.md5(data, 'base64'); },
    cryptoHexEncodedHash256: function (data) { return AWS.util.crypto.sha256(data, 'hex'); }

    cryptoMd5Method: data => Crypto.createHash('md5').update(data).digest('base64'),
    cryptoHexEncodedHash256: data => Crypto.createHash('sha256').update(data).digest('hex')
     */

    const uploadFile = evaporate => {
      // const file = new File([""], "file_object_to_upload");

      const addConfig = {
        name: "<%= @resource.s3_dir_name(type: 'data') %>" + "/" + fileObj.name,
        file: fileObj,
        contentType: fileObj.type,
        // progress: progressValue => console.log('Progress', progressValue),
        progress: progressValue => {
          $('#progress_' + md5Id).attr('value', progressValue);
        },
        // complete: (_xhr, awsKey) => console.log('Complete!'),
        complete: (_xhr, awsKey) => {
          $.ajax({
            type: "POST",
            url: "<%= stash_engine.test_up_complete_path %>",
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(
                { resource_id: "<%= @resource.id %>",
                  name: fileObj.name,
                  size: fileObj.size,
                  type: fileObj.type
                }
            ),
            success: result => $('#progress_' + md5Id).replaceWith("<div>File " + fileObj.name + " uploaded</div>"),
            dataType: 'json'
          });
        }
      }

      // The bucket and some other properties may want to be be changed per upload
      const overrides = {
        bucket: "<%= APP_CONFIG[:s3][:bucket] %>"
      };

      evaporate.add(addConfig, overrides)
          .then(
              awsObjectKey => console.log('File successfully uploaded to:', awsObjectKey),
              reason => console.log('File did not upload sucessfully:', reason)
          );
    }

    return Evaporate.create(config).then(uploadFile);
  }

  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      let md5 = Crypto.createHash('MD5').update(f.name).digest('hex');
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
          f.size, ' bytes, last modified: ',
          f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
          '</li>',
          '<br/><progress value="0.0" max="1.0" id="progress_', md5 ,'"></progress><br/>');
      // test();
      evaporateIt(f);
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>